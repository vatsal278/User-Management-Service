// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vatsal278/UserManagementService/internal/handler (interfaces: UserMgmtSvcHandler)

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserMgmtSvcHandler is a mock of UserMgmtSvcHandler interface.
type MockUserMgmtSvcHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserMgmtSvcHandlerMockRecorder
}

// MockUserMgmtSvcHandlerMockRecorder is the mock recorder for MockUserMgmtSvcHandler.
type MockUserMgmtSvcHandlerMockRecorder struct {
	mock *MockUserMgmtSvcHandler
}

// NewMockUserMgmtSvcHandler creates a new mock instance.
func NewMockUserMgmtSvcHandler(ctrl *gomock.Controller) *MockUserMgmtSvcHandler {
	mock := &MockUserMgmtSvcHandler{ctrl: ctrl}
	mock.recorder = &MockUserMgmtSvcHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserMgmtSvcHandler) EXPECT() *MockUserMgmtSvcHandlerMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method.
func (m *MockUserMgmtSvcHandler) HealthCheck() (string, string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockUserMgmtSvcHandlerMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockUserMgmtSvcHandler)(nil).HealthCheck))
}

// Login mocks base method.
func (m *MockUserMgmtSvcHandler) Login(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Login", arg0, arg1)
}

// Login indicates an expected call of Login.
func (mr *MockUserMgmtSvcHandlerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserMgmtSvcHandler)(nil).Login), arg0, arg1)
}

// SignUp mocks base method.
func (m *MockUserMgmtSvcHandler) SignUp(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignUp", arg0, arg1)
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserMgmtSvcHandlerMockRecorder) SignUp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserMgmtSvcHandler)(nil).SignUp), arg0, arg1)
}
