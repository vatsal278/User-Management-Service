// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vatsal278/UserManagementService/internal/logic (interfaces: UserMgmtSvcLogicIer)

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	model "github.com/PereRohit/util/model"
	gomock "github.com/golang/mock/gomock"
	model0 "github.com/vatsal278/UserManagementService/internal/model"
)

// MockUserMgmtSvcLogicIer is a mock of UserMgmtSvcLogicIer interface.
type MockUserMgmtSvcLogicIer struct {
	ctrl     *gomock.Controller
	recorder *MockUserMgmtSvcLogicIerMockRecorder
}

// MockUserMgmtSvcLogicIerMockRecorder is the mock recorder for MockUserMgmtSvcLogicIer.
type MockUserMgmtSvcLogicIerMockRecorder struct {
	mock *MockUserMgmtSvcLogicIer
}

// NewMockUserMgmtSvcLogicIer creates a new mock instance.
func NewMockUserMgmtSvcLogicIer(ctrl *gomock.Controller) *MockUserMgmtSvcLogicIer {
	mock := &MockUserMgmtSvcLogicIer{ctrl: ctrl}
	mock.recorder = &MockUserMgmtSvcLogicIerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserMgmtSvcLogicIer) EXPECT() *MockUserMgmtSvcLogicIerMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockUserMgmtSvcLogicIer) Activate(arg0 string) *model.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activate", arg0)
	ret0, _ := ret[0].(*model.Response)
	return ret0
}

// Activate indicates an expected call of Activate.
func (mr *MockUserMgmtSvcLogicIerMockRecorder) Activate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockUserMgmtSvcLogicIer)(nil).Activate), arg0)
}

// HealthCheck mocks base method.
func (m *MockUserMgmtSvcLogicIer) HealthCheck() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockUserMgmtSvcLogicIerMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockUserMgmtSvcLogicIer)(nil).HealthCheck))
}

// Login mocks base method.
func (m *MockUserMgmtSvcLogicIer) Login(arg0 http.ResponseWriter, arg1 model0.LoginCredentials) *model.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*model.Response)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockUserMgmtSvcLogicIerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserMgmtSvcLogicIer)(nil).Login), arg0, arg1)
}

// Signup mocks base method.
func (m *MockUserMgmtSvcLogicIer) Signup(arg0 model0.SignUpCredentials) *model.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", arg0)
	ret0, _ := ret[0].(*model.Response)
	return ret0
}

// Signup indicates an expected call of Signup.
func (mr *MockUserMgmtSvcLogicIerMockRecorder) Signup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockUserMgmtSvcLogicIer)(nil).Signup), arg0)
}

// UserData mocks base method.
func (m *MockUserMgmtSvcLogicIer) UserData(arg0 string) *model.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserData", arg0)
	ret0, _ := ret[0].(*model.Response)
	return ret0
}

// UserData indicates an expected call of UserData.
func (mr *MockUserMgmtSvcLogicIerMockRecorder) UserData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserData", reflect.TypeOf((*MockUserMgmtSvcLogicIer)(nil).UserData), arg0)
}
